'use client';

import "./globals.css";
import Navbar from "./components/navbar";
import { AuthProvider } from "../context/authContext";
import { Toaster } from "react-hot-toast";
import { Montserrat } from "next/font/google";
import ReduxProvider from "./redux/reduxProvider";
import { useEffect, useState } from "react";
import { useDispatch } from "react-redux";
import { setExpenses } from "./redux/expenseSlice";

const montserrat = Montserrat({
  weight: ["400"],
  style: ["normal"],
  subsets: ["latin"],
  display: "swap",
  variable: "--font-montserrat",
});

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={`${montserrat.variable} antialiased`}>
        <AuthProvider>
          <Navbar />
          <Toaster position="top-right" reverseOrder={false} />
          <ReduxProvider>
            <FetchExpenses>{children}</FetchExpenses>
          </ReduxProvider>
        </AuthProvider>
      </body>
    </html>
  );
}

// This component fetches data once and populates Redux
function FetchExpenses({ children }) {
  const dispatch = useDispatch();
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const resUser = await fetch("/api/me");
        const userJson = await resUser.json();
        if (!userJson.isLoggedIn) return;

        const resExp = await fetch(`/api/expenses?userId=${userJson.user.id}`);
        const expJson = await resExp.json();
        dispatch(setExpenses(expJson));
      } catch (err) {
        console.error("Failed to fetch expenses:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [dispatch]);

  // Optional: render a loader while fetching globally
  if (loading) {
    return <div className="flex justify-center items-center h-screen">Loading...</div>;
  }

  return children;
}
